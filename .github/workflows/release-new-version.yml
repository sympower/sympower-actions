#Release new docker image to ECR and schema to Nexus (if contains any changes)

name: Release

on:
  workflow_call:
    inputs:
      serviceGistID:
        required: true
        type: string
      schemaGistID:
        required: true
        type: string
    secrets:
      GIT_TOKEN:
        required: true
      SONAR_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      GIST_SECRET:
        required: true
      MAVEN_REPO_PUBLIC_URL:
        required: true
      MAVEN_REPO_SNAPSHOTS_URL:
        required: true
      MAVEN_REPO_RELEASES_URL:
        required: true
      MAVEN_REPO_USER:
        required: true
      MAVEN_REPO_PASS:
        required: true
      DOCKER_REGISTRY_HOST:
        required: true
      PACT_BROKER_BASE_URL:
        required: true
      PACT_BROKER_USERNAME:
        required: true
      PACT_BROKER_PASSWORD:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          set -ue ;
          ./gradlew build integrationTest sonar --parallel --continue --stacktrace \
            -PsympowerMavenRepoPublicUrl=${{ secrets.MAVEN_REPO_PUBLIC_URL }} \
            -PsympowerMavenRepoSnapshotsUrl=${{ secrets.MAVEN_REPO_SNAPSHOTS_URL }} \
            -PsympowerMavenRepoReleasesUrl=${{ secrets.MAVEN_REPO_RELEASES_URL }} \
            -PsympowerMavenRepoUsername=${{ secrets.MAVEN_REPO_USER }} \
            -PsympowerMavenRepoPassword=${{ secrets.MAVEN_REPO_PASS }} \
            -Ppactbroker.url=${{ secrets.PACT_BROKER_BASE_URL }} \
            -Ppactbroker.auth.username=${{ secrets.PACT_BROKER_USERNAME }} \
            -Ppactbroker.auth.password=${{ secrets.PACT_BROKER_PASSWORD }} \
            -Ptag="${GITHUB_SHA::7}" ;

      - name: Set env
        run: |
          set -ue ;
          currentDate=$(date +"%Y.%m.%d.%H.%M") ;
          tag=$(echo $GITHUB_SHA | cut -c 1-7) ;
          echo "VERSION=$(echo $currentDate-$tag)" >> $GITHUB_ENV ;
          echo "REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'eu-central-1'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        if:
          contains('
          refs/heads/main
          refs/heads/master
          ', github.ref)
        run: |
          set -ue ;
          ./gradlew bootBuildImage --parallel --continue --stacktrace \
            -PsympowerMavenRepoPublicUrl=${{ secrets.MAVEN_REPO_PUBLIC_URL }} \
            -PsympowerMavenRepoSnapshotsUrl=${{ secrets.MAVEN_REPO_SNAPSHOTS_URL }} \
            -PsympowerMavenRepoReleasesUrl=${{ secrets.MAVEN_REPO_RELEASES_URL }} \
            -PsympowerMavenRepoUsername=${{ secrets.MAVEN_REPO_USER }} \
            -PsympowerMavenRepoPassword=${{ secrets.MAVEN_REPO_PASS }} \
            -PregistryHost=${{ secrets.DOCKER_REGISTRY_HOST }} \
            -Ptag="${{ env.VERSION }}" ;

      - name: Push Docker Image to Registry
        if:
          contains('
          refs/heads/main
          refs/heads/master
          ', github.ref)
        run: |
          set -ue ;
          for VERSION_FILE in $(find . | grep  .generated-build-info.env) ; do
              echo "Pushing image from definition file: ${VERSION_FILE}"
              source "${VERSION_FILE}" ;
              docker push "${FULL_DOCKER_IMAGE_NAME}" ;
          done

      - name: Update Service Version Badge
        if:
          contains('
          refs/heads/main
          refs/heads/master
          ', github.ref)
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ inputs.serviceGistID }}
          filename: ${{ env.REPOSITORY_NAME }}-service.json
          label: Service Version
          message: ${{ env.VERSION }}
          color: blue

      - name: Check for changes in schema
        if:
          contains('
          refs/heads/main
          refs/heads/master
          ', github.ref)
        id: schema-files
        uses: tj-actions/changed-files@v35
        with:
          since_last_remote_commit: "true"
          files: schema/**

      - name: Upload schema
        if:
          contains('
          refs/heads/main
          refs/heads/master
          ', github.ref)
          && steps.schema-files.outputs.any_changed == 'true'
        run: |
          set -ue ;
          ./gradlew publish --parallel --continue --stacktrace \
            -PsympowerMavenRepoPublicUrl=${{ secrets.MAVEN_REPO_PUBLIC_URL }} \
            -PsympowerMavenRepoSnapshotsUrl=${{ secrets.MAVEN_REPO_SNAPSHOTS_URL }} \
            -PsympowerMavenRepoReleasesUrl=${{ secrets.MAVEN_REPO_RELEASES_URL }} \
            -PsympowerMavenRepoUsername=${{ secrets.MAVEN_REPO_USER }} \
            -PsympowerMavenRepoPassword=${{ secrets.MAVEN_REPO_PASS }} \
            -Ptag="${{ env.VERSION }}" ;

      - name: Update Schema Version Badge
        if:
          contains('
          refs/heads/main
          refs/heads/master
          ', github.ref)
          && steps.schema-files.outputs.any_changed == 'true'
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ inputs.schemaGistID }}
          filename: ${{ env.REPOSITORY_NAME }}-schema.json
          label: Schema Version
          message: ${{ env.VERSION }}
          color: orange

      - name: Upload Pacts
        if:
          contains('
          refs/heads/main
          refs/heads/master
          ', github.ref)
        run: |
          set -ue ;
          for PACT_DIR in $( find . | grep build/pacts$ | sed 's/^.\///' ) ; do
            echo "Uploading pacts in: ${PACT_DIR}"
            docker run --rm \
             -w ${PWD} \
             -v ${PWD}:${PWD} \
             -e PACT_BROKER_BASE_URL=${{ secrets.PACT_BROKER_BASE_URL }} \
             -e PACT_BROKER_USERNAME=${{ secrets.PACT_BROKER_USERNAME }} \
             -e PACT_BROKER_PASSWORD=${{ secrets.PACT_BROKER_PASSWORD }} \
              pactfoundation/pact-cli:0.50.0.27 \
              publish \
              ${PWD}/${PACT_DIR} \
              --consumer-app-version "${{ env.VERSION }}"
          done

      - name: Upload build results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: results
          retention-days: 1
          path: |
            **/build/reports/**/*
            **/build/libs/**/*
